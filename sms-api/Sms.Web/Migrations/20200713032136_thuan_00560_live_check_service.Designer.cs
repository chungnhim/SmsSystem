// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sms.Web.Entity;
using Sms.Web.Helpers;

namespace Sms.Web.Migrations
{
    [DbContext(typeof(SmsDataContext))]
    [Migration("20200713032136_thuan_00560_live_check_service")]
    partial class thuan_00560_live_check_service
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Sms.Web.Entity.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsDisabled");

                    b.Property<int>("Priority");

                    b.Property<string>("Title");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Sms.Web.Entity.CheckoutRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<string>("BankAccountName");

                    b.Property<string>("BankAccountNumber");

                    b.Property<string>("BankCode");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CheckoutRequests");
                });

            modelBuilder.Entity("Sms.Web.Entity.Com", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComName")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool>("Disabled");

                    b.Property<int>("GsmDeviceId");

                    b.Property<string>("Guid");

                    b.Property<int?>("NetworkProvider");

                    b.Property<float?>("PhoneEfficiency");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ComName");

                    b.HasIndex("GsmDeviceId");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("Coms");
                });

            modelBuilder.Entity("Sms.Web.Entity.DailyReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AgentCheckout");

                    b.Property<decimal>("AgentDiscount");

                    b.Property<int>("CanceledOrderCount");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("CreatedOrderCount");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ErrorOrderCount");

                    b.Property<int>("FinishedOrderCount");

                    b.Property<string>("Guid");

                    b.Property<decimal>("RechargedCredits");

                    b.Property<decimal>("ReferalFee");

                    b.Property<decimal>("ReferedFee");

                    b.Property<decimal>("SpentCredits");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("DailyReports");
                });

            modelBuilder.Entity("Sms.Web.Entity.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("GsmDeviceId");

                    b.Property<string>("Guid");

                    b.Property<int>("Month");

                    b.Property<float>("Percent");

                    b.Property<int>("ServiceProviderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("GsmDeviceId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Sms.Web.Entity.ErrorPhoneLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("ServiceProviderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("IsActive", "ServiceProviderId");

                    b.ToTable("ErrorPhoneLogs");
                });

            modelBuilder.Entity("Sms.Web.Entity.ErrorPhoneLogUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("ErrorPhoneLogId");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsIgnored");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ErrorPhoneLogId");

                    b.HasIndex("UserId");

                    b.ToTable("ErrorPhoneLogUsers");
                });

            modelBuilder.Entity("Sms.Web.Entity.ForgotPasswordToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<string>("Token");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<bool>("Used");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ForgotPasswordTokens");
                });

            modelBuilder.Entity("Sms.Web.Entity.GsmDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AllowVoiceOrder");

                    b.Property<string>("Code")
                        .HasMaxLength(10);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool>("Disabled");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsInMaintenance");

                    b.Property<bool>("IsServingForThirdService");

                    b.Property<DateTime?>("LastMaintenanceTime");

                    b.Property<string>("Name");

                    b.Property<string>("Note");

                    b.Property<bool>("OnlyWebOrder");

                    b.Property<int>("Priority");

                    b.Property<bool>("SpecifiedService");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("GsmDevices");
                });

            modelBuilder.Entity("Sms.Web.Entity.GsmDeviceServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("GsmDeviceId");

                    b.Property<string>("Guid");

                    b.Property<int>("ServiceProviderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("GsmDeviceId");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("GsmDeviceServiceProviders");
                });

            modelBuilder.Entity("Sms.Web.Entity.GsmReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("GsmId");

                    b.Property<string>("Guid");

                    b.Property<int>("OrderStatus");

                    b.Property<DateTime>("ReportedDate");

                    b.Property<int>("ServiceProviderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("GsmReports");
                });

            modelBuilder.Entity("Sms.Web.Entity.InternationalSim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("ForwarderId");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<int>("SimCountryId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ForwarderId");

                    b.HasIndex("SimCountryId");

                    b.ToTable("InternationalSims");
                });

            modelBuilder.Entity("Sms.Web.Entity.NewServiceSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Description");

                    b.Property<string>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("Sender");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<string>("Url");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NewServiceSuggestions");
                });

            modelBuilder.Entity("Sms.Web.Entity.OfflinePaymentNotice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("ErrorReason");

                    b.Property<string>("Guid");

                    b.Property<string>("OptionalMessage");

                    b.Property<string>("ReceiptCode");

                    b.Property<string>("ServiceProvider");

                    b.Property<int?>("SolvedReceiptId");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("SolvedReceiptId");

                    b.ToTable("OfflinePaymentNotices");
                });

            modelBuilder.Entity("Sms.Web.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppSourceType");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("Expired");

                    b.Property<string>("Guid");

                    b.Property<int>("LockTime");

                    b.Property<int?>("MaximunSms");

                    b.Property<bool>("NeedProposedProcessing");

                    b.Property<int>("OrderType");

                    b.Property<bool>("PendingReferalCalculate");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15);

                    b.Property<decimal>("Price");

                    b.Property<string>("ProposedPhoneNumber");

                    b.Property<int?>("RemainingSms");

                    b.Property<string>("RequestPhoneNumber");

                    b.Property<int>("Status");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasDiscriminator<int>("OrderType");
                });

            modelBuilder.Entity("Sms.Web.Entity.OrderComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminComment");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<int>("OrderComplaintStatus");

                    b.Property<int>("OrderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<string>("UserComment");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderComplaints");
                });

            modelBuilder.Entity("Sms.Web.Entity.OrderResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AudioUrl");

                    b.Property<decimal>("Cost");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<string>("Message");

                    b.Property<int>("OrderId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Sender");

                    b.Property<int?>("SmsHistoryId");

                    b.Property<int>("SmsType");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SmsHistoryId");

                    b.ToTable("OrderResults");
                });

            modelBuilder.Entity("Sms.Web.Entity.OrderResultReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<int>("OrderResultId");

                    b.Property<int>("OrderResultReportStatus");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("OrderResultId");

                    b.ToTable("OrderResultReports");
                });

            modelBuilder.Entity("Sms.Web.Entity.PaymentMethodConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BankAccount");

                    b.Property<string>("BankCode");

                    b.Property<string>("BankName");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsDisabled");

                    b.Property<string>("MessageFromAdmin");

                    b.Property<string>("Name");

                    b.Property<string>("OwnerName");

                    b.Property<int>("PaymentMethodType");

                    b.Property<string>("Sender");

                    b.Property<string>("Thumbnail");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethodConfigurations");
                });

            modelBuilder.Entity("Sms.Web.Entity.PhoneFailedCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContinuousFailed");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("GsmDeviceId");

                    b.Property<string>("Guid");

                    b.Property<int>("TotalFailed");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasAlternateKey("GsmDeviceId")
                        .HasName("AlternateKey_PhoneFailedCount_PhoneNumber");

                    b.ToTable("PhoneFailedCounts");
                });

            modelBuilder.Entity("Sms.Web.Entity.PhoneFailedNotification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContinuosFailed");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("GsmDeviceCode");

                    b.Property<int>("GsmDeviceId");

                    b.Property<string>("GsmDeviceName");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsRead");

                    b.Property<int>("TotalFailed");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("PhoneFailedNotifications");
                });

            modelBuilder.Entity("Sms.Web.Entity.ProviderHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("ServiceProviderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ProviderHistories");
                });

            modelBuilder.Entity("Sms.Web.Entity.ServiceNetworkProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<int>("NetworkProviderId");

                    b.Property<int>("ServiceProviderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId");

                    b.ToTable("ServiceNetworkProviders");
                });

            modelBuilder.Entity("Sms.Web.Entity.ServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AdditionalPrice");

                    b.Property<bool>("AllowReceiveCall");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool>("Disabled");

                    b.Property<int?>("ErrorThreshold");

                    b.Property<string>("Guid");

                    b.Property<int>("LockTime");

                    b.Property<string>("MessageCodeRegex");

                    b.Property<string>("MessageRegex");

                    b.Property<string>("Name");

                    b.Property<bool>("NeedLiveCheckBeforeUse");

                    b.Property<decimal>("Price");

                    b.Property<decimal?>("Price2");

                    b.Property<decimal?>("Price3");

                    b.Property<decimal?>("Price4");

                    b.Property<decimal?>("Price5");

                    b.Property<decimal?>("PriceReceiveCall");

                    b.Property<int>("ReceivingThreshold");

                    b.Property<int>("ServiceType");

                    b.Property<int?>("TotalErrorThreshold");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("Sms.Web.Entity.ServiceProviderPhoneNumberLiveCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CheckBy");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<int>("LiveCheckStatus");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime?>("PostedAt");

                    b.Property<DateTime?>("ReturnedAt");

                    b.Property<int>("ServiceProviderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("ServiceProviderId", "PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("ServiceProviderPhoneNumberLiveChecks");
                });

            modelBuilder.Entity("Sms.Web.Entity.SimCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired();

                    b.Property<string>("CountryName")
                        .IsRequired();

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsDisabled");

                    b.Property<int>("LockTime");

                    b.Property<string>("PhonePrefix")
                        .IsRequired();

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("SimCountries");
                });

            modelBuilder.Entity("Sms.Web.Entity.SmsHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AudioUrl");

                    b.Property<string>("Content");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<int?>("NotMappedOrderId");

                    b.Property<string>("PermanentMessageRegex");

                    b.Property<int>("PermanentServiceType");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("ReceivedDate");

                    b.Property<string>("Sender");

                    b.Property<int>("SmsType");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.HasIndex("NotMappedOrderId");

                    b.ToTable("SmsHistorys");
                });

            modelBuilder.Entity("Sms.Web.Entity.SystemAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("DetailJson");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsSent");

                    b.Property<string>("Thread")
                        .HasMaxLength(40);

                    b.Property<string>("Topic")
                        .HasMaxLength(20);

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.HasKey("Id");

                    b.ToTable("SystemAlerts");
                });

            modelBuilder.Entity("Sms.Web.Entity.SystemConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminNotification");

                    b.Property<int?>("AutoCancelOrderDuration");

                    b.Property<string>("BccEmail");

                    b.Property<string>("BrandName");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<decimal>("ExternalTransferFee");

                    b.Property<string>("FacebookUrl");

                    b.Property<int?>("FloatingOrderWarning");

                    b.Property<int>("GsmServiceProviderContinuosFailed");

                    b.Property<string>("Guid");

                    b.Property<decimal>("InternalTransferFee");

                    b.Property<string>("LogoUrl");

                    b.Property<int>("MaximumAvailableInternationSimOrder");

                    b.Property<int>("MaximumAvailableOrder");

                    b.Property<string>("MomoAccessKey");

                    b.Property<string>("MomoApiEndPoint");

                    b.Property<string>("MomoPartnerCode");

                    b.Property<string>("MomoSecretKey");

                    b.Property<bool>("NganLuongIsLiveEnvironment");

                    b.Property<string>("NganLuongLiveMerchantCode");

                    b.Property<string>("NganLuongLiveMerchantPassword");

                    b.Property<string>("NganLuongLiveReceiver");

                    b.Property<string>("NganLuongSandboxMerchantCode");

                    b.Property<string>("NganLuongSandboxMerchantPassword");

                    b.Property<string>("NganLuongSandboxReceiver");

                    b.Property<string>("PayeeAccount");

                    b.Property<string>("PayeeName");

                    b.Property<string>("PayeeSecretKey");

                    b.Property<string>("PhoneNumber");

                    b.Property<decimal>("ReferalFee");

                    b.Property<decimal>("ReferredUserFee");

                    b.Property<int>("ServiceProviderContinuosFailed");

                    b.Property<string>("TelegramUrl");

                    b.Property<int?>("ThresholdsForAutoSuspend");

                    b.Property<int?>("ThresholdsForWarning");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<decimal>("UsdRate");

                    b.Property<int>("UserContinuosFailed");

                    b.Property<string>("YoutubeUrl");

                    b.HasKey("Id");

                    b.ToTable("SystemConfigurations");
                });

            modelBuilder.Entity("Sms.Web.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApiKey");

                    b.Property<decimal>("Ballance");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsBanned");

                    b.Property<string>("Password");

                    b.Property<bool>("ReferEnabled");

                    b.Property<string>("ReferalCode")
                        .HasMaxLength(6);

                    b.Property<int?>("ReferalId");

                    b.Property<int>("Role");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Username")
                        .HasName("AlternateKey_Username");

                    b.HasIndex("ApiKey");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserBalanceSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("Date");

                    b.Property<string>("Guid");

                    b.Property<int>("Month");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Year", "Month", "Date")
                        .IsUnique();

                    b.ToTable("UserBalanceSnapshots");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserGsmDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<int>("GsmDeviceId");

                    b.Property<string>("Guid");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GsmDeviceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGsmDevices");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserOfflinePaymentReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsExpired");

                    b.Property<int?>("PaymentMethodConfigurationId");

                    b.Property<string>("ReceiptCode");

                    b.Property<string>("ReceiptResult");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<string>("UserConfirmedAccountOwner");

                    b.Property<decimal?>("UserConfirmedAmount");

                    b.Property<string>("UserConfirmedComment");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMethodConfigurationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOfflinePaymentReceipts");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserPaymentTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsExpired");

                    b.Property<long>("Money");

                    b.Property<string>("RequestId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserPaymentTransactions");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Email");

                    b.Property<string>("Guid");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserReferalFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<decimal>("FeeAmount");

                    b.Property<string>("Guid");

                    b.Property<decimal>("ReferFeePercent");

                    b.Property<int>("ReferredUserId");

                    b.Property<DateTime>("ReportTime");

                    b.Property<decimal>("TotalCost");

                    b.Property<int>("TotalOrderCount");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ReferredUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserReferalFees");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserReferredFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<decimal>("FeeAmount");

                    b.Property<string>("Guid");

                    b.Property<decimal>("ReferFeePercent");

                    b.Property<DateTime>("ReportTime");

                    b.Property<decimal>("TotalCost");

                    b.Property<int>("TotalOrderCount");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserReferredFees");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime>("Expired");

                    b.Property<string>("Guid");

                    b.Property<Guid>("Token");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Sms.Web.Entity.UserTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<decimal?>("Balance");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("Created");

                    b.Property<int?>("CreatedBy");

                    b.Property<string>("Guid");

                    b.Property<bool>("IsImport");

                    b.Property<int?>("OfflinePaymentMethodType");

                    b.Property<int?>("OrderId");

                    b.Property<DateTime?>("Updated");

                    b.Property<int?>("UpdatedBy");

                    b.Property<int>("UserId");

                    b.Property<int>("UserTransactionType");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTransactions");
                });

            modelBuilder.Entity("Sms.Web.Entity.InternationalSimOrder", b =>
                {
                    b.HasBaseType("Sms.Web.Entity.Order");

                    b.Property<int?>("ConnectedForwarderId");

                    b.Property<int>("SimCountryId");

                    b.HasIndex("SimCountryId");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Sms.Web.Entity.RentCodeOrder", b =>
                {
                    b.HasBaseType("Sms.Web.Entity.Order");

                    b.Property<bool>("AllowVoiceSms");

                    b.Property<int?>("ConnectedGsmId");

                    b.Property<decimal>("GsmDeviceProfit");

                    b.Property<int?>("NetworkProvider");

                    b.Property<int?>("NotMatchServiceId");

                    b.Property<bool>("OnlyAcceptFreshOtp");

                    b.Property<string>("ProposedGsm512RangeName");

                    b.Property<int>("ServiceProviderId");

                    b.Property<decimal?>("VoiceSmsPrice");

                    b.HasIndex("ServiceProviderId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Sms.Web.Entity.CheckoutRequest", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.Com", b =>
                {
                    b.HasOne("Sms.Web.Entity.GsmDevice", "GsmDevice")
                        .WithMany("Coms")
                        .HasForeignKey("GsmDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.Discount", b =>
                {
                    b.HasOne("Sms.Web.Entity.GsmDevice", "GsmDevice")
                        .WithMany()
                        .HasForeignKey("GsmDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sms.Web.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.ErrorPhoneLogUser", b =>
                {
                    b.HasOne("Sms.Web.Entity.ErrorPhoneLog", "ErrorPhoneLog")
                        .WithMany("ErrorPhoneLogOrders")
                        .HasForeignKey("ErrorPhoneLogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.ForgotPasswordToken", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.GsmDeviceServiceProvider", b =>
                {
                    b.HasOne("Sms.Web.Entity.GsmDevice", "GsmDevice")
                        .WithMany("GsmDeviceServiceProviders")
                        .HasForeignKey("GsmDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sms.Web.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.InternationalSim", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "Forwarder")
                        .WithMany()
                        .HasForeignKey("ForwarderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sms.Web.Entity.SimCountry", "SimCountry")
                        .WithMany()
                        .HasForeignKey("SimCountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.NewServiceSuggestion", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.OfflinePaymentNotice", b =>
                {
                    b.HasOne("Sms.Web.Entity.UserOfflinePaymentReceipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("SolvedReceiptId");
                });

            modelBuilder.Entity("Sms.Web.Entity.Order", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sms.Web.Entity.OrderComplaint", b =>
                {
                    b.HasOne("Sms.Web.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.OrderResult", b =>
                {
                    b.HasOne("Sms.Web.Entity.Order", "Order")
                        .WithMany("OrderResults")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sms.Web.Entity.SmsHistory", "SmsHistory")
                        .WithMany()
                        .HasForeignKey("SmsHistoryId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Sms.Web.Entity.OrderResultReport", b =>
                {
                    b.HasOne("Sms.Web.Entity.OrderResult", "OrderResult")
                        .WithMany()
                        .HasForeignKey("OrderResultId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.ProviderHistory", b =>
                {
                    b.HasOne("Sms.Web.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId");
                });

            modelBuilder.Entity("Sms.Web.Entity.ServiceNetworkProvider", b =>
                {
                    b.HasOne("Sms.Web.Entity.ServiceProvider")
                        .WithMany("ServiceNetworkProviders")
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.ServiceProviderPhoneNumberLiveCheck", b =>
                {
                    b.HasOne("Sms.Web.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.SmsHistory", b =>
                {
                    b.HasOne("Sms.Web.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("NotMappedOrderId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Sms.Web.Entity.UserBalanceSnapshot", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sms.Web.Entity.UserGsmDevice", b =>
                {
                    b.HasOne("Sms.Web.Entity.GsmDevice", "GsmDevice")
                        .WithMany("UserGsmDevices")
                        .HasForeignKey("GsmDeviceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany("UserGsmDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.UserOfflinePaymentReceipt", b =>
                {
                    b.HasOne("Sms.Web.Entity.PaymentMethodConfiguration", "PaymentMethodConfiguration")
                        .WithMany()
                        .HasForeignKey("PaymentMethodConfigurationId");

                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.UserProfile", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Sms.Web.Entity.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.UserReferalFee", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "ReferredUser")
                        .WithMany()
                        .HasForeignKey("ReferredUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sms.Web.Entity.UserReferredFee", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.UserToken", b =>
                {
                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.UserTransaction", b =>
                {
                    b.HasOne("Sms.Web.Entity.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sms.Web.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Sms.Web.Entity.InternationalSimOrder", b =>
                {
                    b.HasOne("Sms.Web.Entity.SimCountry", "SimCountry")
                        .WithMany()
                        .HasForeignKey("SimCountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Sms.Web.Entity.RentCodeOrder", b =>
                {
                    b.HasOne("Sms.Web.Entity.ServiceProvider", "ServiceProvider")
                        .WithMany()
                        .HasForeignKey("ServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
